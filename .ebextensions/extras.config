  Resources:
    ALBCognitoAuth:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - AuthenticateCognitoConfig:
              OnUnauthenticatedRequest: authenticate
#              SessionCookieName: AWSELBAuthSessionCookie
              SessionTimeout: 604800
              UserPoolArn:
                Fn::GetOptionSetting:
                  OptionName: UserPoolArn
              UserPoolClientId:
                Fn::GetOptionSetting:
                  OptionName: UserPoolClientId
              UserPoolDomain:
                Fn::GetOptionSetting:
                  OptionName: UserPoolDomain
              Scope: "phone openid email profile aws.cognito.signin.user.admin"
            Type: authenticate-cognito
            Order: 1
          - TargetGroupArn:  { "Ref" : "AWSEBV2LoadBalancerTargetGroup"}
            Type: forward
            Order: 2
        Conditions:
          - Field: path-pattern
            PathPatternConfig:
              Values:
                - "/*"
        ListenerArn: { "Ref" : "AWSEBV2LoadBalancerListener443"}
        Priority: 10

    DashWAF:
      Type: AWS::WAFv2::WebACL
      Properties:
  #      CustomResponseBodies:
  #        Key: Value
        Name:
          Fn::GetOptionSetting:
            OptionName: WAFName
        DefaultAction:
          Allow:
            CustomRequestHandling:
              InsertHeaders:
                - Name: DefaultAction
                  Value: DefaultAction
        Description: WAF for the dashboard.
        Rules:
          - Name: RuleWithAWSManagedRulesCommon
            Priority: 0
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RuleWithAWSManagedRulesCommon
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
                ExcludedRules: []
          - Name: RuleWithAWSManagedRulesIP
            Priority: 1
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RuleWithAWSManagedRulesIP
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAmazonIpReputationList
                ExcludedRules: []
          - Name: RuleWithAWSManagedRulesBadInput
            Priority: 2
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RuleWithAWSManagedRulesBadInput
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesKnownBadInputsRuleSet
                ExcludedRules: []
          - Name: RuleWithAWSManagedRulesSQL
            Priority: 3
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RuleWithAWSManagedRulesSQL
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesSQLiRuleSet
                ExcludedRules: []
        Scope: REGIONAL
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: ExampleWebACLMetric

    WAFAssocation:
      Type: AWS::WAFv2::WebACLAssociation
      Properties:
        ResourceArn: { "Ref" : "AWSEBV2LoadBalancer" }
        WebACLArn: { "Fn::GetAtt" : [ "DashWAF", "Arn" ] }

    # Redirect http to https
    AWSEBV2LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn:
          Ref: AWSEBV2LoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Host: "#{host}"
              Path: "/#{path}"
              Port: "443"
              Protocol: "HTTPS"
              Query: "#{query}"
              StatusCode: "HTTP_301"